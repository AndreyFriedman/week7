
def initialization(matrix):
    '''
    given matrix it returns a matrix with random jobs given to random machines
    if a job is givven to machine there will be + sign in the returned matrix, else there will be - sign

    mat = [["", "M1", "M2", "M3", "M4"],
          ["J1", 14, 6, 8, 20],
          ["J2", 7, 4, 11, 20],
          ["J3", 3, 21, 5, 20],
          ["J4", 1, 1, 5, 20]]
    initialization(mat)
        [['', 'M1', 'M2', 'M3', 'M4'],
        ['J1', '-', '-', '+', '-'],
        ['J2', '-', '+', '-', '-'],
        ['J3', '-', '-', '+', '-'],
        ['J4', '-', '-', '-', '+']]


    mat = [["", "M1"],
          ["J1", 14]]
    initialization(mat)
        [['', 'M1'],
        ['J1', '+']]


    mat = [["", "M1", "M2", "M3"],
          ["J1", 14, 6, 8]]
    initialization(mat)
        [['', 'M1', 'M2', 'M3'],
        ['J1', '-', '-', '+']]


    mat = [["", "M1"],
          ["J1", 14],
          ["J2", 7],
          ["J3", 3]]
    initialization(mat)
        [['', 'M1'],
        ['J1', '+'],
        ['J2', '+'],
        ['J3', '+']]


    :param matrix:
    :return:
    '''
    return


def check(matrix,sol1, sol2, j, k):
    '''
    checks which of 2 matrices is better, after changing the neighbors or before
    it checks the changed columns

    [['', 'M1', 'M2', 'M3'], ['J1', 14, 6, 8]]
    [['', 'M1', 'M2', 'M3'], ['J1', '-', '-', '+']]
    [['', 'M1', 'M2', 'M3'], ['J1', '-', '+', '-']]
    2
    3
    return True


    [['', 'M1', 'M2', 'M3', 'M4'], ['J1', 14, 6, 8, 20], ['J2', 7, 4, 11, 20], ['J3', 3, 21, 5, 20], ['J4', 1, 1, 5, 20]]
    [['', 'M1', 'M2', 'M3', 'M4'], ['J1', '-', '-', '-', '+'], ['J2', '-', '-', '+', '-'], ['J3', '+', '-', '-', '-'], ['J4', '-', '-', '-', '+']]
    [['', 'M1', 'M2', 'M3', 'M4'], ['J1', '-', '-', '-', '+'], ['J2', '-', '-', '+', '-'], ['J3', '+', '-', '-', '-'], ['J4', '-', '-', '+', '-']]
    3
    4
    return True

    [['', 'M1', 'M2', 'M3', 'M4'], ['J1', 14, 6, 8, 20], ['J2', 7, 4, 11, 20], ['J3', 3, 21, 5, 20], ['J4', 1, 1, 5, 20]]
    [['', 'M1', 'M2', 'M3', 'M4'], ['J1', '-', '-', '+', '-'], ['J2', '-', '-', '+', '-'], ['J3', '+', '-', '-', '-'], ['J4', '-', '+', '-', '-']]
    [['', 'M1', 'M2', 'M3', 'M4'], ['J1', '-', '-', '+', '-'], ['J2', '-', '-', '+', '-'], ['J3', '+', '-', '-', '-'], ['J4', '-', '-', '+', '-']]
    3
    2
    return False



    :param matrix:
    :param mat1:
    :param mat2:
    :return:
    '''
    return

def simulator(matrix):
    '''
    main function with temperatures
    mat = [["", "M1", "M2", "M3", "M4"],
          ["J1", 14, 6, 8, 20],
          ["J2", 7, 4, 11, 20],
          ["J3", 3, 21, 5, 20],
          ["J4", 1, 1, 5, 20]]
    simulator(mat)
        [['', 'M1', 'M2', 'M3', 'M4'],
        ['J1', '-', '+', '-', '-'],
        ['J2', '+', '-', '-', '-'],
        ['J3', '-', '-', '+', '-'],
        ['J4', '-', '+', '-', '-']]

    mat = [["", "M1", "M2"],
          ["J1", 14, 6],
          ["J2", 7, 4]]
    simulator(mat)
        [['', 'M1', 'M2'],
        ['J1', '-', '+'],
        ['J2', '+', '-']]

    mat = [["", "M1", "M2", "M3"],
          ["J1", 14, 60, 80],
          ["J2", 7, 40, 110],
          ["J3", 3, 210, 50]]
    simulator(mat)
        [['', 'M1', 'M2', 'M3'],
        ['J1', '+', '-', '-'],
        ['J2', '+', '-', '-'],
        ['J3', '+', '-', '-']]

    mat = [["", "M1"],
          ["J1", 14],
          ["J2", 7],
          ["J3", 3]]
    simulator(mat)
        [['', 'M1'],
        ['J1', '+'],
        ['J2', '+'],
        ['J3', '+']]

    mat = [["", "M1", "M2", "M3"],
          ["J1", 14, 6, 8]]
    simulator(mat)
        [['', 'M1', 'M2', 'M3'],
        ['J1', '-', '+', '-']]

    :param matrix:
    :return:
    '''
    return